import { Message } from "../models/message.ts";
import { client } from "../supabase.ts";
import { NotificationService } from "./notification_service.ts";

export class MessageService {
  static async sendMessage(conversation_id: string, sender_id: string, content: string): Promise<{ message?: Message; error?: string }> {
    console.log("[INFO][MESSAGING] ‚û°Ô∏è D√©but de l'envoi d'un message");
    console.log("[INFO][MESSAGING] üì• Donn√©es re√ßues :", { conversation_id, sender_id, content });
    // R√©cup√©rer la conversation et v√©rifier que le sender est participant
    const { data: conv, error: convError } = await client.from("conversations").select("*").eq("id", conversation_id).single();
    if (convError) {
      console.log("[ERROR][MESSAGING] ‚ùå Erreur lors de la r√©cup√©ration de la conversation :", convError.message);
      return { error: "Erreur lors de la r√©cup√©ration de la conversation" };
    }
    if (!conv || !conv.participants.includes(sender_id)) {
      console.log("[ERROR][MESSAGING] ‚ö†Ô∏è Acc√®s refus√© ou conversation introuvable");
      return { error: "Acc√®s refus√© ou conversation introuvable" };
    }
    console.log("[INFO][MESSAGING] ‚úÖ Conversation trouv√©e :", conv);
    const now = new Date().toISOString();
    const { data, error } = await client.from("messages").insert([
      { conversation_id, sender_id, content, created_at: now, lu: false }
    ]).select().single();
    if (error) {
      console.log("[ERROR][MESSAGING] ‚ùå Erreur lors de l'envoi du message :", error.message);
      return { error: "Erreur lors de l'envoi du message" };
    }
    console.log("[INFO][MESSAGING] ‚úÖ Message ins√©r√© dans la base :", data);
    // Notifier les autres participants
    for (const user_id of conv.participants) {
      if (user_id !== sender_id) {
        console.log(`[INFO][MESSAGING] üîî Notification envoy√©e √† ${user_id}`);
        await NotificationService.createNotification(
          user_id,
          "new_message",
          `Nouveau message de ${sender_id}: ${content}`
        );
      }
    }
    console.log("[INFO][MESSAGING] ‚úÖ Message envoy√© avec succ√®s");
    return { message: data as Message };
  }

  static async listMessages(conversation_id: string, user_id: string, limit = 10, offset = 0): Promise<{ messages?: Message[]; error?: string }> {
    console.log("[INFO][MESSAGING] ‚û°Ô∏è D√©but de la r√©cup√©ration des messages");
    console.log("[INFO][MESSAGING] üì• Param√®tres re√ßus :", { conversation_id, user_id, limit, offset });
    // V√©rifier que l'utilisateur est participant
    const { data: conv, error: convError } = await client.from("conversations").select("*").eq("id", conversation_id).single();
    if (convError) {
      console.log("[ERROR][MESSAGING] ‚ùå Erreur lors de la r√©cup√©ration de la conversation :", convError.message);
      return { error: "Erreur lors de la r√©cup√©ration de la conversation" };
    }
    if (!conv || !conv.participants.includes(user_id)) {
      console.log("[ERROR][MESSAGING] ‚ö†Ô∏è Acc√®s refus√© √† la conversation");
      return { error: "Acc√®s refus√© √† la conversation" };
    }
    console.log("[INFO][MESSAGING] ‚úÖ Conversation trouv√©e :", conv);
    const { data, error } = await client.from("messages").select("*").eq("conversation_id", conversation_id).order("created_at", { ascending: true }).range(offset, offset + limit - 1);
    if (error) {
      console.log("[ERROR][MESSAGING] ‚ùå Erreur lors de la r√©cup√©ration des messages :", error.message);
      return { error: "Erreur lors de la r√©cup√©ration des messages" };
    }
    console.log("[INFO][MESSAGING] ‚úÖ Messages r√©cup√©r√©s :", data);
    return { messages: data as Message[] };
  }

  static async deleteMessages(conversation_id: string, user_id: string): Promise<{ deleted: boolean; error?: string }> {
    console.log("[INFO][MESSAGING] ‚û°Ô∏è D√©but de la suppression des messages d'une conversation");
    console.log("[INFO][MESSAGING] üì• Param√®tres re√ßus :", { conversation_id, user_id });
    // V√©rifier que l'utilisateur est participant
    const { data: conv, error: convError } = await client.from("conversations").select("*").eq("id", conversation_id).single();
    if (convError) {
      console.log("[ERROR][MESSAGING] ‚ùå Erreur lors de la r√©cup√©ration de la conversation :", convError.message);
      return { deleted: false, error: "Erreur lors de la r√©cup√©ration de la conversation" };
    }
    if (!conv || !conv.participants.includes(user_id)) {
      console.log("[ERROR][MESSAGING] ‚ö†Ô∏è Acc√®s refus√© √† la conversation");
      return { deleted: false, error: "Acc√®s refus√© √† la conversation" };
    }
    console.log("[INFO][MESSAGING] ‚úÖ Conversation trouv√©e :", conv);
    // Suppression logique (on marque les messages comme supprim√©s pour ce user, √† adapter si soft delete par user)
    // Ici, on supprime pour tous (hard delete)
    const { error } = await client.from("messages").delete().eq("conversation_id", conversation_id);
    if (error) {
      console.log("[ERROR][MESSAGING] ‚ùå Erreur lors de la suppression :", error.message);
      return { deleted: false, error: "Erreur lors de la suppression" };
    }
    console.log("[INFO][MESSAGING] ‚úÖ Messages supprim√©s avec succ√®s");
    return { deleted: true };
  }
}
